#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: Not titled yet
# GNU Radio version: 3.8.5.0-rc1

# originally generated by gnuradio-companion
# then modified to suit otaTestbed needs

from gnuradio import blocks
from gnuradio import gr
from gnuradio.filter import firdes
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio import uhd
import time

class receiver_flowgraph(gr.top_block):
    def __init__(self,address,
                    clock_rate,
                    sample_rate,
                    num_channels,
                    subdev_spec,
                    num_seconds_receive):

        gr.top_block.__init__(self, "Not titled yet")

        # Radio settings
        self.address = address
        self.clock_rate = clock_rate
        self.sample_rate = sample_rate
        self.num_channels = num_channels
        self.subdev_spec = subdev_spec
        self.num_seconds_receive = num_seconds_receive
        
        # Instantiate source block
        self.uhd_usrp_source = uhd.usrp_source(
            ",".join(("addr="+str(address),"","master_clock_rate="+str(clock_rate))),
            uhd.stream_args(
                cpu_format="fc32",
                args='',
                channels=list(range(0,num_channels)),
            ),
        )
        self.uhd_usrp_source.set_subdev_spec(subdev_spec,0)
        self.uhd_usrp_source.set_clock_rate(clock_rate, uhd.ALL_MBOARDS)
        self.uhd_usrp_source.set_samp_rate(sample_rate)

        # Store head and vector sink for future access
        self.head_blocks = {}
        self.vector_sink_blocks = {}


    def configure_channel(self,antenna, gain, center_freq, channel_num):
        # Configure antenna settings, fc, and gain
        self.uhd_usrp_source.set_antenna(antenna, channel_num)
        self.uhd_usrp_source.set_normalized_gain(gain, channel_num)
        self.uhd_usrp_source.set_center_freq(center_freq, channel_num)

        # Create head and vector sink blocks
        head_block = blocks.head(gr.sizeof_gr_complex*1, int(self.sample_rate * self.num_seconds_receive))
        vector_sink_block = blocks.vector_sink_c(1,1024) 

        # Connect blocks to source
        self.connect((head_block,0), (vector_sink_block,0))
        self.connect((self.uhd_usrp_source,channel_num), (head_block,0))

        # Add blocks to class field for future access
        self.head_blocks[channel_num] = head_block
        self.vector_sink_blocks[channel_num] = vector_sink_block

        return 

    def get_vector_sink_data(self, channel_num):
        return self.vector_sink_blocks[channel_num].data()

    def print_radio_settings(self):
        print("Radio Settings:")
        print("IP Address:", self.address)
        print("Master Clock Rate:", self.uhd_usrp_source.get_clock_rate())
        print("Sampling Rate:", self.uhd_usrp_source.get_samp_rate())
        print("Subdev Spec:", self.uhd_usrp_source.get_subdev_spec())
        print("Number of Channels:", self.num_channels)
        print("Number of seconds to receive:", self.num_seconds_receive)
        print()
        return

    def print_channel_settings(self, channel_num):
        print("Channel", channel_num, "Settings:")
        print("Antenna:", self.uhd_usrp_source.get_antenna(channel_num))
        print("Center Frequency:", self.uhd_usrp_source.get_center_freq(channel_num))
        print("Normalized Gain:", self.uhd_usrp_source.get_normalized_gain(channel_num))
        print()
        return

